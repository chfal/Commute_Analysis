mutate(normalized_total_time = total_time - 55.9/6.90621)
#normalized results
commute_n<- commute_2 %>%
mutate(normalized_total_time = total_time - 55.9/6.90621)
View(commute_n)
commute_n<- commute_2 %>%
mutate(normalized_total_time = (total_time - 55.9)/6.90621)
View(commute_n)
hist(commute_n$normalized_total_time)
shapiro.test(commute_n$normalized_total_time)
eqgamma(x=total_time, ci = .95)
eqgamma(x=total_time, p=.9 ci = .95)
eqgamma(x=total_time, p=.9, ci = .95)
eqgamma(x=total_time, p=.95, ci = .95)
eqgamma(x=total_time, p=.05, ci=.95)
confirmed <- read.csv("time_series_covid19_confirmed_global.csv",
na.strings="")
deaths <- read.csv("time_series_covid19_deaths_global.csv", na.strings="")
recovered <- read.csv("time_series_covid19_recovered_global.csv",
na.strings="")
install.packages("deSolve")
View(shapiro_result_df)
y <- rgamma(n,shape=alpha, scale = beta) + c
c0 <- min(y) - 1e-4
nu <- 1:12
nnu <- length(nu)
mlefit2 <- vector("list",nnu)
nLL2 <- function(theta,nu) {-sum(dchisq(y-theta, df=nu))}
for (i in 1:length(nu)) {
mlefit2[[i]] <- optimize(nLL2, interval=c(0,c0), nu=nu[i])
}
objective <- sapply(mlefit2, "[[", "objective")
plot(nu,objective, type="b",
xlab="Degrees of freedom", ylab="Negative Log-Likelihood")
best <- which.min(objective)
cbest <- mlefit2[[best]]$minimum
mlefit <- optim(c(alpha0,beta0,c0),nLL)
alphahat <- mlefit$par[1]
betahat <- mlefit$par[2]
chat <- mlefit$par[3]
alpha <- 2 # shape parameter
beta <- 5  # scale parameter
c <- 10    # shift parameter
n <- 100   # sample size
set.seed(2020) # for reproducibility
y <- rgamma(n,shape=alpha, scale = beta) + c
#################
# Shifted gamma
#################
## Negative log-likelihood function
## (theta[1] = alpha, theta[2] = beta, theta[3] = c)
nLL <- function(theta) {-sum(dgamma(y-theta[3], shape=theta[1],
scale=theta[2], log=TRUE))}
## Initial estimates
ybar <- mean(y)
s2 <- var(y)
c0 <- min(y) - 1e-4
beta0 <- s2 / (ybar - c0)
alpha0 <- (ybar - c0)^2 / s2
## Optimization
mlefit <- optim(c(alpha0,beta0,c0),nLL)
alphahat <- mlefit$par[1]
betahat <- mlefit$par[2]
chat <- mlefit$par[3]
chat
pchisq(cbest/chat)
pchisq(cbest/chat, df=1)
pchisq(cbest/chat, df=1, lower.tail=T)
pchisq(cbest/chat, df=1, lower.tail=FALSE)
pchisq(best/chat, df=1, lower.tail=FALSE)
library(fitdistrplus)
mlefit2 <- fitdist(y,"gamma")
alphahat2 <- coef(mlefit2)[1]
betahat2 <- coef(mlefit2)[2]
hist(y, freq=FALSE, xlim=c(0,65), ylim=c(0,0.08))
curve(dgamma(x-c,shape=alpha,scale=beta), add=TRUE, lwd=1.5, n=401)
curve(dgamma(x-chat,shape=alphahat,scale=betahat), add=TRUE,
col=2, lwd=1.5, n=401)
curve(dgamma(x,shape=alpha,scale=beta), add=TRUE, col=3, lwd=1.5, n=401)
legend("topright", col=1:3, lty=1, lwd=1.5, cex=0.75,
c("Shifted gamma (truth)","Shifted gamma (MLE)","Gamma (MLE)"))
y
str(r)
str(y)
View(shapiro_result_df)
c0 <- min(total_time) - 1e-4
nu <- 1:12
nnu <- length(nu)
mlefit2 <- vector("list",nnu)
nLL2 <- function(theta,nu) {-sum(dchisq(total_time-theta, df=nu))}
for (i in 1:length(nu)) {
mlefit2[[i]] <- optimize(nLL2, interval=c(0,c0), nu=nu[i])
}
c0 <- min(total_time) - 1e-4
nu <- 1:12
nnu <- length(nu)
mlefit2 <- vector("list",nnu)
nLL2 <- function(theta,nu) {-sum(dchisq(total_time-theta, df=nu))}
for (i in 1:length(nu)) {
mlefit2[[i]] <- optimize(nLL2, interval=c(0,c0), nu=nu[i])
}
objective <- sapply(mlefit2, "[[", "objective")
setwd("C:/Users/chfal/Desktop/ICOMPBIO/R-coding-bootcamp-master/1.startRwMetricExample")
rm( list=ls()) #clean up worksapce
list.files()
tb = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
?str
help(str)
str(tb);
tinytex::reinstall_tinytex()
View(tb)
View(tb)
tb[2,5]
tb[2,5]
tb[1:5,2:5]
table(tb$age)
?table
age()
tb$age
hist(metric)
attach(tb)
hist(metric)
pi;
pi;
exp(1)
log(exp(1))
help(pch)
setwd("C:/Users/chfal/Desktop/ICOMPBIO/R-coding-bootcamp-master/2.coding")
rm(list=ls())
for ( i in 1:3) print(i);
for ( i in c(0.5, 1, -2, 5) ) print(i);
for ( i in c(0.5, 1, -2, 5) ) {
x = i * i
print( sqrt(x))
}
i = i + 2;
i=2;
while( i<=10 ) {
print(i);
i = i + 2;
}
install.packages("ape")
install.packages("ape","seqinr")
install.packages(c("ape","seqinr"))
seqinr
library(seqinr)
help(seqinr)
install.packages("seqinr")
i=5;
while(i<=10){
print(i)
i=i+1
}
take_even = function( x ) {
y = c(); #empty array
for( i in 1:length(x)) {
if ( (x[i] %% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );
}
}
y; #the last line, return y to the main program
}
x <- 1:10
take_even = function( x ) {
y = c(); #empty array
for( i in 1:length(x)) {
if ( (x[i] %% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );
}
}
y; #the last line, return y to the main program
}
take_even(x)
56%%6
56/6
56/9
56%%9
take_uphalf <- function(x){
y=c()
xbar=mean(x)
for( i in 1:length(x)){
y-c(y,x[i])
}
y
}
take_uphalf(1:15)
take_uphalf(x)
x
x<- 1:15
x
xbar=mean(x)
x<- 1:15
take_uphalf(x)
take_uphalf <- function(x){
y=c()
xbar=mean(x)
for(i in 1:length(x)){
if(x[i]>xbar){
y=c(y,x[i])
}
}
y
}
x<- 1:15
take_uphalf(x)
print(paste("y inside=", y.inside))
take_uphalf <- function(x){
y=c()
xbar=mean(x)
for(i in 1:length(x)){
if(x[i]>xbar){
y=c(y,x[i])
}
}
y.inside=y
print(paste("y inside=", y.inside))
}
take_uphalf(x)
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
seqs
View(seqs)
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA")
seq1 = seqs[[1]]
table( seq1 ); #nucleotide composition
GC(seq1);  # GC content
num = 1:length(seqs);
gc  = 1:length(seqs);
out = data.frame( cbind( num, gc ) );
out$samples = "TMP"
for( i in 1:length(seqs) ) {
out$gc[i] = GC( seqs[[i]] );
out$samples[i] = attr(seqs[[i]], "name")
}
out;
write.csv(out, "gc.csv", row.names=F) # output the results
out
help(GC)
help(AT)
list.files()
save.image("Test.RData");
("Test.RData")
rm(list=ls());
ls(); #nothing
load("Test.RData");
molar_solution2 <- function( conc, vol, FW) {
FW * conc * vol /10^6
}
molar_solution2( 100, 500, 58.433) # 1mM 100mL NaCl
molar_solution2( 100, 100, 74.5513)  #100mM 100mL KCl
molar_solution3 <- function( conc, vol, formula) {
FWs = c(58.443, 74.5513, 84.997, 40)
names(FWs) = c('NaCl', 'KCl', 'NaNO3', 'NaOH');
FW = FWs[formula]
FW * conc * vol / 10^6
}
molar_solution3( 100, 500, 'NaCl' ) #100mM 500ML NaCl
molar_solution3(35,100, "NaOh")
molar_solution3(35,100, "NaOH")
rm(list=ls()) #clearn my workspace
tb = read.csv("Carlson_Yeast.csv");
plot( tb$Amount ~ tb$Hours );
cbind(tb)
help(cbind)
plot( Amount ~ Hours, data=tb, type="b",
main="Carlson growth curve" );
##first try, not pretty
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
##### the second data set, multiple plots
tb2 = read.csv( "Carlson2.csv" );
##first try, not pretty
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
help(lwd)
legend(2,500,c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5)))
legend(2,500,c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(2,500,c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend(2,500,c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5), position="bottomright")
legend()
help(legend)
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(2,500,c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend(2,500, position="bottomright", c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(2,500, position="bottomright", c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend(2,500,"bottomright", c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(2,500,"bottomright", c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend("bottomright," 2,500, c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend("bottomright," 2,500, c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend("bottomright," c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend("bottomright,", c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend(c("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(c("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5))
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"),lwd=c(1,5), lty=(2,2))
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"), lwd=c(1,5), lty=(2,2))
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"), lwd=c(1,5), lty=(2,2))
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"), lwd=c(1,5), lty=(1,2))
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"), lwd=c(1,5), lty=(1,2)))
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"), lwd=c(1,5), lty=(2))
plot(tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
legend(("bottomright"), c("Amount", "Second Amount"), col=c("Blue","Orange"), lwd=c(1,5), lty=(2))
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red" );
getwd()
setwd("C:/Users/chfal/Desktop/ICOMPBIO/R-coding-bootcamp-master/3.input-output")
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy-20190530.csv", row.names=F)
plot( y ~ x, pch=x )
mlefit2
setwd("C:/Users/chfal/OneDrive - University of Massachusetts Boston/COMPSTAT/Final_Project")
library(tidyverse)
library(knitr)
library(patchwork)
library(stats4)
library(EnvStats)
library(corrplot)
library(fitdistrplus)
#read data, clean it
commute <-read_csv("commute3.csv")
commute_2 <- commute[,c(2,15:22)]
commute_3 <- commute[,c(15:22)]
commute_4 <- commute_3 %>%
gather(key = "segment", value= "time")
knitr::include_graphics("commute_map.png")
#mean
mean_time <- commute_4 %>%
group_by(segment) %>%
summarize(mean= mean(time, na.rm=T))
#standard deviation
stdev_time <- commute_4 %>%
group_by(segment)%>%
summarize(stdev_time = sd(time, na.rm=T))
stdev_time
#shapiro test: absolutely NONE of my variables are normal! let's make a nice table anyways.
shapiro_result <- lapply(commute_2[,2:9], shapiro.test)
p_value <- c("1.45e-07",".0006423","2.2e-12",".0009328",".039","1.08e-10","5.96e-12","9.93e-06")
segment <- c("green_line","mbta_total","red_line","time_wo_walk","total_time","wait_green","wait_red","walk_or_bike")
mean_time <- c(22.58,38.12,11.93,53.24,53.93,4.05, 3.18,11.31)
stdev_time <- c(3.46,5.61,2.12,7.10,6.91,3.15,3.17,3.29)
shapiro_data_frame <- data.frame(segment, mean_time, stdev_time, p_value)
knitr::kable(shapiro_data_frame)
#this is supposed to be a function that calculates the correct binwidth because ggplot2 won't do it for you (the default is 30).I am having some trouble getting this to work correctly on the vectors it is supposed to.
binwidth <- function(x, na.rm=TRUE){
2*IQR(x)/length(x)^1/3
}
commute_4 %>%
group_by(segment) %>%
ggplot(aes(time, fill=segment)) +
geom_histogram(aes(time),binwidth=) +
facet_wrap(facets="segment") +
labs(title = "Histograms of Different Commute Segments", xlab="time (minutes)")
total_time <- as.vector(commute_2$total_time)
total_time <- total_time[!is.na(total_time)]
egamma(total_time)
enorm(total_time)
eweibull(total_time)
#
#library(stats4)
#nLL = function(theta){-sum(dgamma(y,shape=theta[1],rate=theta[2],log=TRUE))}
#fit=mle(nLL)
#confint(fit)
#vcov(fit)
hist(total_time, main="Total Time", breaks="FD", freq=FALSE, ylim =c(0,.07), xlim=c(0,80), xlab="time (minutes)")
curve(dnorm(x, mean=55.931, sd=6.906261), from=0, to=80, add=TRUE, col="red",lwd=2)
curve(dgamma(x, shape=68.2686038, scale=.8192905), from=0, to=80, add=TRUE, col="blue", lwd=2)
curve(dweibull(x, shape=8.043449, scale=59.057884), from=0, to=80, add=TRUE, col="green", lwd=2)
legend(x="topleft",legend=c("gamma","normal", "weibull"), lty=1, col=c("blue", "red","green"))
total_time <- total_time[!is.na(total_time)]
## Simulate shifted gamma distribution
alpha <- 10 # shape parameter
beta <- 3  # scale parameter
c <- 35    # shift parameter
n <- 100   # sample size
set.seed(2020) # for reproducibility
#################
# Shifted gamma
#################
## Negative log-likelihood function
## (theta[1] = alpha, theta[2] = beta, theta[3] = c)
nLL_gamma <- function(theta) {-sum(dgamma(total_time-theta[3], shape=theta[1],
scale=theta[2], log=TRUE))}
## Initial estimates
ybar <- mean(total_time)
s2 <- var(total_time)
c0 <- min(total_time) - 1e-4
beta0 <- s2 / (ybar - c0)
alpha0 <- (ybar - c0)^2 / s2
## Optimization
mlefit <- optim(c(alpha0,beta0,c0),nLL_gamma)
alphahat <- mlefit$par[1]
betahat <- mlefit$par[2]
chat <- mlefit$par[3]
mlefit
hist(total_time, freq=FALSE, xlim=c(0,80), ylim=c(0,0.08), main="Total Time on Shifted/NonShifted Gamma Distribution", xlab="time (minutes)")
curve(dgamma(x-chat,shape=alphahat,scale=betahat), add=TRUE,
col="blue", lwd=2, n=401)
curve(dgamma(x,shape=alpha,scale=beta), add=TRUE, col="red", lwd=2, n=401)
legend("topleft", col=c("blue","red"), lty=1, lwd=2, cex=0.75,
c("Shifted gamma (MLE)","Non-shifted gamma (MLE)"))
c0 <- min(total_time) - 1e-4
nu <- 1:50
nnu <- length(nu)
mlefit2 <- vector("list",nnu)
nLL2 <- function(theta,nu) {-sum(dchisq(total_time-theta, df=nu, log=TRUE))}
for (i in 1:length(nu)) {
mlefit2[[i]] <- optimize(nLL2, interval=c(0,c0), nu=nu[i])
}
objective <- sapply(mlefit2, "[[", "objective")
best <- which.min(objective)
mlefit2[23]
plot(nu,objective, type="b", col="purple", xlab="Degrees of freedom", ylab="Negative Log-Likelihood", main="Degrees of Freedom versus Log-Likelihood Function Value")
hist(total_time, xlim=c(0,80), ylim=c(0,.08), freq=FALSE, main="Total time on Chi-Square Distribution", xlab="Time (minutes)")
curve(dchisq(x-32.91041,df=23), from=0, to=80, add=T, col="turquoise", lwd=2)
legend("topleft", col="turquoise", lty=1, lwd=2, cex=0.75,("chi-square"))
hist(total_time, freq=FALSE, xlim=c(0,80), ylim=c(0,.08), main="Shifted Gamma vs. Shifted Chi-Square", xlab="time (minutes)")
curve(dchisq(x-32.91041,df=23), add=T, col="turquoise", lwd=2)
curve(dgamma(x-chat,shape=alphahat,scale=betahat), add=TRUE,
col="blue", lwd=2)
legend("topleft", col=c("turquoise","blue"),lty=1, lwd=2,cex=.75, c("shifted chi-square","shifted gamma"))
# this is the likelihood ratio test statistic
(2*(291.5154-291.4696))
#this is the likelihood ratio test on the chi-square distribution with df=1
pchisq(.0916, df=1, lower.tail=FALSE)
home_commute <- commute %>%
subset(destination=="home")
home_vector <- home_commute$total_time
home_vector <- na.omit(home_vector)
shapiro.test(home_vector)
school_commute <- commute %>%
subset(destination=="school")
school_vector <- school_commute$total_time
shapiro.test(school_vector)
var.test(home_vector, school_vector)
plot_1 <- ggplot(mapping=aes(home_vector)) +
geom_histogram(fill="darkorange2", binwidth = 5) +
theme_bw() +
labs(title="Commute Going Home", x="Time it Took to Go Home (minutes)")
plot_2 <- ggplot(mapping=aes(school_vector)) +
geom_histogram(fill="darkturquoise", binwidth=5) +
theme_bw() +
labs(title="Commute Going to School", x="Time it Took to Get to School (minutes)")
plot_1 + plot_2
var.test(home_vector, school_vector)
commute_cor <- cor(commute_2[,2:7], use="complete.obs")
corrplot(commute_cor, type="upper")
practicelm <- lm(wait_green~wait_red,commute_2)
confint(practicelm, level=.99)
#linear model for effect of green line on total time
plotlm <- lm(total_time ~ green_line, commute_2)
plot(commute_2$green_line,commute_2$total_time, main = "Effect of Green Line on Total Time", xlab="green line time (minutes)", ylab="total time (minutes)")
abline(plotlm, col="red")
plot(plotlm, which=1:2)
summary(plotlm)
#linear model for green line wait on total
plotlm2 <- lm(total_time~wait_green, commute_2)
plot(commute_2$wait_green,commute_2$total_time, main = "Effect of Waiting for the Green Line on Total Time", xlab="waiting for green  time (minutes)", ylab="total time (minutes)")
abline(plotlm2, col="blue")
plot(plotlm2, which=1:2)
summary(plotlm2)
eqgamma(x=total_time, p=.05, ci=.95)
eqgamma(x=total_time, p=.95, ci = .95)
confint(mlefit2)
mlefit2
mlefit2[23]
confint(mlefit2[23])
confint(mlefit2[23$minimum])
confint(dchisq(total_time, 23))
confint(dchisq(total_time, df=23))
confint(23)
c0
chat
c2
c0
chat
qchisq(c(.025,.975), df=23)
11.68855+chat
.025,.975
qchisq(c(.025,.975), df=23)
qchisq(c(.025,.975), df=23) + chat
